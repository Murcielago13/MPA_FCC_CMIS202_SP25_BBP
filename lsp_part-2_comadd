package leaderboardapp;

import javax.swing.*;  // For GUI components
import java.awt.*;     // For layout management
import java.awt.event.*; // For event handling
import java.io.*;      // For file I/O operations
import java.time.LocalDate; // To store submission dates
import java.util.ArrayList;
import java.util.*;    // For Queue and LinkedList usage

public class LeaderboardAppSwing {

    // Main GUI components for input and output
    private JFrame frame;
    private JTextField nameField, scoreField;
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private JList<String> scoreList = new JList<>(listModel);

    // Custom singly linked list to store score entries instead of ArrayList
    private ScoreLinkedList scores = new ScoreLinkedList();

    // Queue to temporarily hold score entries before adding to the main list
    // This simulates buffered/batch processing
    private Queue<ScoreEntry> pendingQueue = new LinkedList<>();

    public static void main(String[] args) {
        // Launch the GUI on the Swing event dispatch thread
        SwingUtilities.invokeLater(() -> new LeaderboardAppSwing().createAndShowGUI());
    }

    // Initializes the leaderboard GUI, loads scores, and sets up event handling
    private void createAndShowGUI() {
        frame = new JFrame("Leaderboard System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        nameField = new JTextField(10);
        scoreField = new JTextField(5);
        JButton submitButton = new JButton("Submit");

        // Arrange components in an input panel
        JPanel inputPanel = new JPanel();
        inputPanel.add(new JLabel("Name:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Score:"));
        inputPanel.add(scoreField);
        inputPanel.add(submitButton);

        // Scrollable display for the leaderboard list
        JScrollPane scrollPane = new JScrollPane(scoreList);
        scrollPane.setPreferredSize(new Dimension(380, 200));

        // Layout configuration for the frame
        frame.setLayout(new BorderLayout());
        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        // Connect submit button to addScore() handler
        submitButton.addActionListener(e -> addScore());

        // Load previous scores from file and display
        loadScores();
        refreshLeaderboard();

        frame.setVisible(true);
    }

    // Handles user score submission: validates input, queues entry, and flushes when needed
    private void addScore() {
        String name = nameField.getText().trim();
        String scoreText = scoreField.getText().trim();

        // Validation to ensure both fields are filled
        if (name.isEmpty() || scoreText.isEmpty()) {
            showError("Please fill in both name and score.");
            return;
        }

        try {
            int score = Integer.parseInt(scoreText); // Must be a valid number

            // Create and queue a new score entry
            ScoreEntry entry = new ScoreEntry(name, score, LocalDate.now());
            pendingQueue.add(entry);

            // Flush queue into the linked list every 5 entries
            if (pendingQueue.size() >= 5) {
                flushQueueToScores();
            }

            // Clear input fields for the next user
            nameField.setText("");
            scoreField.setText("");

            // Always refresh to give visual feedback of current state
            refreshLeaderboard();
        } catch (NumberFormatException e) {
            showError("Score must be a number.");
        }
    }

    // Flushes all queued entries into the linked list and writes to disk
    private void flushQueueToScores() {
        while (!pendingQueue.isEmpty()) {
            ScoreEntry entry = pendingQueue.poll(); // Dequeue
            scores.add(entry);                      // Add to linked list
        }
        saveScores(); // Persist to file
    }

    // Sorts and displays the leaderboard
    private void refreshLeaderboard() {
        ArrayList<ScoreEntry> scoreList = scores.toArrayList(); // Convert to ArrayList for sorting
        mergeSort(scoreList, 0, scoreList.size() - 1);           // Sort by score descending

        listModel.clear(); // Clear GUI display
        for (ScoreEntry entry : scoreList) {
            listModel.addElement(entry.toString()); // Add sorted entries to display
        }
    }

    // Saves all current scores to scores.txt (CSV format)
    private void saveScores() {
        try (PrintWriter writer = new PrintWriter("scores.txt")) {
            for (ScoreEntry entry : scores.toArrayList()) {
                writer.println(entry.name + "," + entry.score + "," + entry.date);
            }
        } catch (IOException e) {
            showError("Error saving scores.");
            e.printStackTrace();
        }
    }

    // Loads scores from scores.txt and repopulates the linked list
    private void loadScores() {
        File file = new File("scores.txt");
        if (!file.exists()) return;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            scores.clear(); // Reset list to avoid duplication
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 3) {
                    String name = parts[0];
                    int score = Integer.parseInt(parts[1]);
                    LocalDate date = LocalDate.parse(parts[2]);
                    scores.add(new ScoreEntry(name, score, date));
                }
            }
        } catch (IOException e) {
            showError("Error loading scores.");
            e.printStackTrace();
        }
    }

    // Shows an error message using a Swing dialog
    private void showError(String message) {
        JOptionPane.showMessageDialog(frame, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Merge sort algorithm (O(n log n)) for sorting entries in descending order of score
    private void mergeSort(ArrayList<ScoreEntry> list, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(list, left, mid);
            mergeSort(list, mid + 1, right);
            merge(list, left, mid, right);
        }
    }

    // Merges two sorted halves into one sorted list
    private void merge(ArrayList<ScoreEntry> list, int left, int mid, int right) {
        ArrayList<ScoreEntry> leftList = new ArrayList<>(list.subList(left, mid + 1));
        ArrayList<ScoreEntry> rightList = new ArrayList<>(list.subList(mid + 1, right + 1));

        int i = 0, j = 0, k = left;

        // Merge step: insert larger scores first (descending)
        while (i < leftList.size() && j < rightList.size()) {
            if (leftList.get(i).compareTo(rightList.get(j)) <= 0) {
                list.set(k++, leftList.get(i++));
            } else {
                list.set(k++, rightList.get(j++));
            }
        }

        // Copy any remaining elements
        while (i < leftList.size()) list.set(k++, leftList.get(i++));
        while (j < rightList.size()) list.set(k++, rightList.get(j++));
    }

    // ScoreEntry: holds user name, score, and date of submission
    static class ScoreEntry implements Comparable<ScoreEntry> {
        String name;
        int score;
        LocalDate date;

        public ScoreEntry(String name, int score, LocalDate date) {
            this.name = name;
            this.score = score;
            this.date = date;
        }

        // Used for sorting: higher scores come first
        @Override
        public int compareTo(ScoreEntry other) {
            return Integer.compare(other.score, this.score); // Descending order
        }

        // String representation for display in the leaderboard
        public String toString() {
            return name + " - " + score + " - " + date;
        }
    }

    // Node structure for the custom singly linked list
    static class ScoreNode {
        ScoreEntry data;
        ScoreNode next;

        public ScoreNode(ScoreEntry data) {
            this.data = data;
        }
    }

    // Custom linked list to store score entries, simulating data structure fundamentals
    static class ScoreLinkedList {
        private ScoreNode head;

        // Adds an entry to the end of the linked list
        public void add(ScoreEntry entry) {
            ScoreNode newNode = new ScoreNode(entry);
            if (head == null) {
                head = newNode;
            } else {
                ScoreNode current = head;
                while (current.next != null) current = current.next;
                current.next = newNode;
            }
        }

        // Converts linked list into an ArrayList for easier sorting
        public ArrayList<ScoreEntry> toArrayList() {
            ArrayList<ScoreEntry> list = new ArrayList<>();
            ScoreNode current = head;
            while (current != null) {
                list.add(current.data);
                current = current.next;
            }
            return list;
        }

        // Clears the linked list
        public void clear() {
            head = null;
        }
    }
}
